Given definitions as follows:

double minf(double x, double y) { return (x < y)? x: y; }
int i = 3;
int j = 5;
double x = 2.7;
double y = 3.2;
Demonstrate the order of calculations for the following expressions:

1.1) (0.5 point) 2.2 * 7 + 9 * 6.1

1.2) (0.5 point) 2.1 * (3 + 5 * 6.2)

1.3) (0.5 point) 22 / 27 * 2.5 + i

1.4) (0.5 point) 22.0 / 27 * x + i

1.5) (0.5 point) minf(x, j)

1.6) (0.5 point) minf(minf(x, j), i)

You must write the calculations in steps and show the final result for each expression.

1.7) (1 point) What will be the final value of i, j, x, and y after the execution of the following statements:

j = 21.0 / 25 * x + i;
y = minf(minf(x, y), j);


Given definitions as follows:

int func1(char c)
{
    int n = 0;
    int i = 0;
    if (++i && c == '[')
        ++n;
    if (++i && c == ']')
        ++n;
    return i + n;
}
int func2(char c)
{
    int n = 0;
    int i = 0;
    if (++i && c == '[')
        ++n;
    else if (++i && c == ']')
        ++n;
    return i + n;
}
2.1) (1 point) What are the value of func1('['), func1(']') and func1('+')?



2.2) (1 point) How many `==` comparisons are computed in func1('['), func1(']') and func1('+')



2.3) (1 point) What are the value of func2('['), func2(']') and func2('+')?


2.4) (1 point) How many `==` comparisons are computed in func2('['), func2(']') and func2('+')?


Write a program to ask for width and height of the rectangle then:

3.1) (1 point) Print the area of the rectangle (width * height) in the program.

3.2) (1 point) Print the perimeter of the rectangle (2 * (width + height)) in the program.

3.3) (1 point) Write a function rect_area that takes the width w and the height h and calculate the rectangle area as a result.

3.4) (1 point) Write a function rect_perimeter that takes the width w and the height h and calculate the rectangle perimeter as a result.

All values processed in the program can have decimal point.


Given the following definitions:

const char text[] = "xyz[20] = { 1, 2, 3 }";
4.1) (1 point) Write statements of C code that count the total number of "=" and "," within text (the result will be 3).

4.2) (1 point) Write statements of C code that count the number of each "=" and "," within text (the result will be 1 for "=" and 2 for ",").

4.3) (2 point) Write a function count_chars that takes a character array a with size n and calculate the total number of "=" and "," within a as a result.


Given the following partial program:

#include <stdio.h>

int main()
{
    double arr[] = {8, 6.2, 3.1, 4};
    /* */
}
5.1) (1 point) Complete the program using arr to compute and print the average of the numbers within arr.

5.2) (1 point) Complete the program using arr to compute and print the square of each number within arr.

5.3) (1 point) Complete the following program:

#include <stdio.h>

int main()
{
    double arr[] = {8, 6.2, 3.1, 4};
    const size_t n = /* */;
    double avg = cal_average(arr, n);
    printf("Average = %.4f\n", avg);
    return 0;
}
The program should print:
Average = 5.3250

5.4) (1 point) Complete the following program:

#include <stdio.h>

int main()
{
    double arr[] = {8, 6.2, 3.1, 4};
    const size_t n = /* */;
    square_numbers(arr, n);

    /* print the numbers in arr */
    return 0;
}
The program should print the number 64, 38.44, 9.61, and 16 as the value of each elements in arr.